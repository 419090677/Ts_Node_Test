var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
    };
    GameConfig.width = 750;
    GameConfig.height = 1334;
    GameConfig.scaleMode = "fixedheight";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "center";
    GameConfig.startScene = "test/test.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Centre_1 = require("./script/mvc/centre/Centre");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
        Centre_1.mvc_Centre.Centre.getInstance().openView("LoginView");
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./script/mvc/centre/Centre":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* 该脚本在游戏开始时被GameManager初始化 */
var mvc_Centre;
(function (mvc_Centre) {
    var Centre = /** @class */ (function () {
        function Centre() {
            this.InitController();
            this.InitModel();
            this.InitView();
        }
        Centre.getInstance = function () {
            if (!Centre.instance) {
                Centre.instance = new Centre();
            }
            return Centre.instance;
        };
        Centre.prototype.InitController = function () {
            this.controller = new Controller();
            this.controller.registerController("LoginController", new LoginController());
        };
        ;
        Centre.prototype.InitModel = function () {
            this.model = new Model();
            this.model.registerModel("LoginModel", new LoginModel());
        };
        ;
        Centre.prototype.InitView = function () {
            this.view = new View();
            this.view.registerView("LoginView", new LoginView("test/test.scene"));
        };
        ;
        Centre.prototype.registerController = function (key, Controller) {
            this.controller.registerController(key, Controller);
        };
        Centre.prototype.unregisterController = function (key) {
            this.controller.unregisterController(key);
        };
        Centre.prototype.executeController = function (key) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            this.controller.execute(key, param);
        };
        Centre.prototype.obtainController = function (key) {
            return this.controller.obtainController(key);
        };
        Centre.prototype.registerModel = function (key, model) {
            this.model.registerModel(key, model);
        };
        Centre.prototype.unregisterModel = function (key) {
            this.model.unregisterModel(key);
        };
        Centre.prototype.obtainModel = function (key) {
            return this.model.obtainModel(key);
        };
        Centre.prototype.registerView = function (key, view) {
            this.view.registerView(key, view);
        };
        Centre.prototype.unregisterView = function (key, view) {
            this.view.unregisterView(key);
        };
        Centre.prototype.obtainView = function (key) {
            return this.view.obtainView(key);
        };
        Centre.prototype.openView = function (key, closeOther, param) {
            if (closeOther === void 0) { closeOther = true; }
            if (param === void 0) { param = {}; }
            this.obtainView(key).openView(closeOther, param);
        };
        return Centre;
    }());
    mvc_Centre.Centre = Centre;
    var Controller = /** @class */ (function () {
        function Controller() {
            this.controllers = {};
        }
        Controller.prototype.registerController = function (key, controller) {
            if (this.controllers[key]) {
                console.warn("Model key:" + key + " has already exits");
            }
            else {
                this.controllers[key] = controller;
            }
        };
        Controller.prototype.unregisterController = function (key) {
            if (this.controllers[key] != null) {
                this.controllers[key] = null;
                delete this.controllers[key];
            }
        };
        Controller.prototype.obtainController = function (key) {
            return this.controllers[key];
        };
        Controller.prototype.execute = function (key, param) {
            if (this.controllers[key] != null) {
                this.controllers[key].execute(param);
            }
        };
        return Controller;
    }());
    var Model = /** @class */ (function () {
        function Model() {
            this.models = {};
        }
        Model.prototype.registerModel = function (key, model) {
            if (this.models[key]) {
                console.warn("Models key:" + key + " has already exits");
            }
            else {
                this.models[key] = model;
            }
        };
        Model.prototype.unregisterModel = function (key) {
            if (this.models[key] != null) {
                this.models[key] = null;
                delete this.models[key];
            }
        };
        Model.prototype.obtainModel = function (key) {
            return this.models[key];
        };
        return Model;
    }());
    var View = /** @class */ (function () {
        function View() {
            /**
             * 已注册的UI
             */
            // private _views: IView[];
            /**
             * 开启中UI
             */
            this.views = {};
        }
        View.prototype.registerView = function (key, view) {
            if (this.views[key]) {
                console.warn("Models key:" + key + " has already exits");
            }
            else {
                this.views[key] = view;
            }
        };
        View.prototype.unregisterView = function (key) {
            if (this.views[key] != null) {
                this.views[key] = null;
                delete this.views[key];
            }
        };
        View.prototype.obtainView = function (key) {
            return this.views[key];
        };
        return View;
    }());
    var ViewBase = /** @class */ (function () {
        function ViewBase(url) {
            this.url = url;
        }
        ViewBase.prototype.openView = function (closeOther, param) {
            if (closeOther === void 0) { closeOther = true; }
            if (param === void 0) { param = {}; }
            Laya.Scene.open(this.url, closeOther, param, Laya.Handler.create(this, function (data) {
                if (data) {
                    this.viewObj = data;
                    console.log("load laya view success");
                    this.onViewLoaded();
                }
                else {
                    console.warn("view is not founded, please check url");
                }
            }.bind(this)), Laya.Handler.create(this, function (data) {
                this;
            }.bind(this)));
        };
        ViewBase.prototype.onViewLoaded = function () {
        };
        return ViewBase;
    }());
    var ModelBase = /** @class */ (function () {
        function ModelBase() {
        }
        return ModelBase;
    }());
    var ControllerBase = /** @class */ (function () {
        function ControllerBase() {
        }
        return ControllerBase;
    }());
    var LoginView = /** @class */ (function (_super) {
        __extends(LoginView, _super);
        function LoginView(url) {
            return _super.call(this, url) || this;
        }
        LoginView.prototype.onViewLoaded = function () {
            this.viewObj.btn1.on(Laya.Event.MOUSE_DOWN, this.viewObj, function () {
                this.viewObj.login_world_bg.visible = false;
                Laya.Scene3D.load("res/Conventional/demo.ls", Laya.Handler.create(this, function (data) {
                    this.scene = data;
                    Laya.stage.addChild(data);
                    Laya.Sprite3D.load("res/Conventional/Wall_Stone_el1.lh", Laya.Handler.create(this, function (sp) {
                        this.scene.addChild(sp);
                    }.bind(this)));
                }.bind(this)));
            }.bind(this));
            this.viewObj.btn2.on(Laya.Event.MOUSE_DOWN, this.viewObj, function () {
                this.viewObj.login_select_bg.visible = false;
                var a = new Son("my name");
                a.PrintName();
                var socket = window['io']();
                socket.emit("socketIoTest", { package: 123 });
                socket.on("ServerSendMsg", function (data) {
                    console.log(data);
                });
            }.bind(this));
        };
        return LoginView;
    }(ViewBase));
    var LoginController = /** @class */ (function (_super) {
        __extends(LoginController, _super);
        function LoginController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LoginController.prototype.execute = function (param) {
        };
        return LoginController;
    }(ControllerBase));
    var LoginModel = /** @class */ (function (_super) {
        __extends(LoginModel, _super);
        function LoginModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LoginModel;
    }(ModelBase));
})(mvc_Centre = exports.mvc_Centre || (exports.mvc_Centre = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
